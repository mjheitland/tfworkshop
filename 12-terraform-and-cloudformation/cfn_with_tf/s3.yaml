# works only if you run a TF server and install Cloudsoft's Terraform connector
# [Installation guide](https://github.com/cloudsoft/aws-cfn-connector-for-terraform/blob/master/doc/installation-guide.md)
AWSTemplateFormatVersion: 2010-09-09
Description: Terraform in CloudFormation example, using the Terraform Connector for CloudFormation
Parameters:
  CFNBucket1Name:
    Type: String
    Default: terraform-rp-example-bucket1-default-from-cfn-2
Resources:
  TerraformExample:
    Type: Cloudsoft::Terraform::Infrastructure
    Properties:
      LogBucketName: cloudsoft-terraform-infrastructure-my-user-logs
      ConfigurationContent: |
        variable "AWSRegion" {
          type = string
          default = "eu-central-1"
        }

        variable "TFBucket1Name" {
          type = string
          default = "terraform-rp-example-bucket1-default-from-tf-overridden-by-cfn-so-not-used-or-needed"
        }

        provider "aws" {
          region = var.AWSRegion
        }

        variable "kms_key_id" {
          description = "KMS key to encrypt the bucket"
          type        = string
          default     = null
        }

        resource "aws_s3_bucket_versioning" "bucket" {
          bucket = aws_s3_bucket.mybucket.id
          versioning_configuration {
            status = "Disabled"
          }
        }

        resource "aws_s3_bucket_acl" "bucket_acl" {
          bucket = aws_s3_bucket.mybucket.id
          acl    = "private"
        }

        resource "aws_s3_bucket_server_side_encryption_configuration" "bucket_encryption" {
          bucket = aws_s3_bucket.mybucket.id

          rule {
            apply_server_side_encryption_by_default {
              kms_master_key_id = var.kms_key_id != null ? var.kms_key_id : null
              sse_algorithm     = var.kms_key_id == null ? "AES256" : "aws:kms"
            }
          }
        }

        resource "aws_s3_bucket" "mybucket" {
          bucket = var.bucket_name

          # A boolean that indicates all objects (including any locked objects) should be deleted from the bucket
          # so that the bucket can be destroyed without error. These objects are not recoverable.
          force_destroy = true

          # prevent accidental deletion of this bucket
          # (if you really have to destroy this bucket, change this value to false and reapply, then run destroy)
          lifecycle {
            prevent_destroy = false
          }
        }

        output "bucket1-id" {
          value = aws_s3_bucket.bucket1.id
        }

        output "bucket1-arn" {
          value = aws_s3_bucket.bucket1.arn
        }

        output "bucket1-region" {
          value = aws_s3_bucket.bucket1.region
        }
      Variables:
        AWSRegion: !Ref "AWS::Region"
        TFBucket1Name: !Ref CFNBucket1Name

Outputs:
  TerraformOutputs:
    Description: Outputs from Terraform as a stringified JSON map
    Value: !GetAtt TerraformExample.OutputsStringified
  LogBucketUrl:
    Value: !GetAtt TerraformExample.LogBucketUrl